apply plugin: 'scala'

repositories {
  maven { url "http://repository.excilys.com/content/groups/public" }
  mavenCentral()
}

ext {
  SCALA_VERSION = "2.11.6"
  GATLING_VERSION = "2.1.4"
}

dependencies {
  compile "org.scala-lang:scala-library:${SCALA_VERSION}"
  compile "io.gatling.highcharts:gatling-charts-highcharts:${GATLING_VERSION}"
  compile "io.gatling:gatling-app:${GATLING_VERSION}"
  compile "io.gatling:gatling-http:${GATLING_VERSION}"
  compile "io.gatling:gatling-core:${GATLING_VERSION}"
  compile "io.gatling:gatling-jdbc:${GATLING_VERSION}"
  compile "io.gatling:gatling-recorder:${GATLING_VERSION}"
  compile 'joda-time:joda-time:2.1'

  compile 'org.scalatest:scalatest_2.11:2.2.4'
}

task gatling(dependsOn: ['processResources', 'compileScala']) << {
  def simulationsToRun = project.hasProperty("simulation") ? project.simulation : 'Simulation'

  file('src/main/scala/simulations').listFiles()
      .findAll { it.name.endsWith("${simulationsToRun}.scala") }
      .collect { it.name.replace('.scala', '') }
      .each { simulation ->

          println "========== Starting Gatling simulation $simulation =========="
          javaexec {
              standardInput = System.in
              main = 'io.gatling.app.Gatling'
              classpath = sourceSets.main.output + sourceSets.main.runtimeClasspath

              def maxResponseSeconds = project.hasProperty("maxResponseSeconds") ? Integer.parseInt(project.maxResponseSeconds) : 300


              def myJvmArgs = [
                  '-Xmx4g',
                  '-Xms1g',
                  '-Xss1m',
                  '-XX:MaxPermSize=256M',
                  "-Dgatling.http.ahc.requestTimeout=${maxResponseSeconds * 1000}",
                  "-Dgatling.http.ahc.readTimeout=${maxResponseSeconds * 1000}",
                  "-Dgatling.http.ahc.connectTimeout=${maxResponseSeconds * 1000}"
              ]

              if(project.hasProperty("users")) {
                myJvmArgs.add("-Dusers=${project.users}")
              }

              if(project.hasProperty("baseUrl")) {
                myJvmArgs.add("-DbaseUrl=${project.baseUrl}")
              }

              jvmArgs = myJvmArgs
              args = ['-rf', file('reports'),
                  '-df', sourceSets.main.output.resourcesDir.toString(),
                  '-s', "simulations.$simulation"]
          }
      }
}


task cleanSimulations(type: Delete) {
  delete 'reports'
}

clean.dependsOn('cleanSimulations')
